{"ast":null,"code":"var _jsxFileName = \"/home/gimenezes/projects/ifood-frontend-test/src/Hooks/auth.tsx\";\nimport React, { createContext, useState, useEffect, useContext } from \"react\";\nimport SpotifyService from \"../Services/spotifyService\";\nconst AuthContext = createContext({});\n\nconst AuthProvider = ({\n  children\n}) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  const hasToken = () => !!localStorage.getItem(\"@spotifood:RefreshToken\");\n\n  const getAccessToken = async code => {\n    try {\n      const {\n        accessToken,\n        refreshToken,\n        tokenType\n      } = await SpotifyService.getAccessToken(code);\n      localStorage.setItem(\"@spotifood:AccessToken\", accessToken);\n      localStorage.setItem(\"@spotifood:RefreshToken\", refreshToken);\n      localStorage.setItem(\"@spotifood:TokenType\", tokenType);\n      window.location.href = \"/\";\n    } catch (error) {\n      throw new Error(\"Tentamos.... mas não conseguimos fazer o login com sua conta do Spotify.\");\n    }\n  };\n\n  const refreshToken = async () => {\n    const token = localStorage.getItem(\"@spotifood:RefreshToken\");\n\n    try {\n      const {\n        accessToken,\n        tokenType\n      } = await SpotifyService.refreshesToken(token);\n      localStorage.setItem(\"@spotifood:AccessToken\", accessToken);\n      localStorage.setItem(\"@spotifood:TokenType\", tokenType);\n      setIsAuthenticated(true);\n    } catch (error) {\n      throw new Error(\"Desculpe, um erro aconteceu. Por favor, refaça o login.\");\n    }\n  };\n\n  useEffect(() => {\n    const validateAccess = async () => {\n      const urlParams = new URLSearchParams(window.location.search);\n      const code = urlParams.get(\"code\");\n      const spotifyError = urlParams.get(\"error\");\n\n      try {\n        if (spotifyError) {\n          throw new Error(\"Tentamos.... mas não conseguimos fazer o login com sua conta do Spotify.\");\n        }\n\n        if (code) {\n          await getAccessToken(code);\n          return;\n        }\n\n        if (hasToken()) {\n          await refreshToken();\n        }\n      } catch (error) {\n        throw new Error('Invalid year value');\n      }\n    };\n\n    validateAccess();\n  }, []);\n\n  const signOut = () => {\n    localStorage.removeItem(\"@spotifood:AccessToken\");\n    localStorage.removeItem(\"@spotifood:RefreshToken\");\n    localStorage.removeItem(\"@spotifood:TokenType\");\n    setIsAuthenticated(false);\n  };\n\n  return /*#__PURE__*/React.createElement(AuthContext.Provider, {\n    value: {\n      isAuthenticated,\n      signOut\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nfunction useAuth() {\n  const context = useContext(AuthContext);\n\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProviver\");\n  }\n\n  return context;\n}\n\nexport { AuthProvider, useAuth };","map":{"version":3,"sources":["/home/gimenezes/projects/ifood-frontend-test/src/Hooks/auth.tsx"],"names":["React","createContext","useState","useEffect","useContext","SpotifyService","AuthContext","AuthProvider","children","isAuthenticated","setIsAuthenticated","hasToken","localStorage","getItem","getAccessToken","code","accessToken","refreshToken","tokenType","setItem","window","location","href","error","Error","token","refreshesToken","validateAccess","urlParams","URLSearchParams","search","get","spotifyError","signOut","removeItem","useAuth","context"],"mappings":"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","sourcesContent":["import React, { createContext, useState, useEffect, useContext } from \"react\";\n\nimport SpotifyService from \"../Services/spotifyService\";\n\ninterface IAuthContext {\n  isAuthenticated: boolean;\n  signOut(): void;\n}\n\nconst AuthContext = createContext<IAuthContext>({} as IAuthContext);\n\nconst AuthProvider: React.FC = ({ children }) => {\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n\n  const hasToken = () => !!localStorage.getItem(\"@spotifood:RefreshToken\");\n\n  const getAccessToken = async (code: string) => {\n    try {\n      const {\n        accessToken,\n        refreshToken,\n        tokenType,\n      } = await SpotifyService.getAccessToken(code);\n      localStorage.setItem(\"@spotifood:AccessToken\", accessToken);\n      localStorage.setItem(\"@spotifood:RefreshToken\", refreshToken);\n      localStorage.setItem(\"@spotifood:TokenType\", tokenType);\n      window.location.href = \"/\";\n    } catch (error) {\n      throw new Error(\n        \"Tentamos.... mas não conseguimos fazer o login com sua conta do Spotify.\"\n      );\n    }\n  };\n\n  const refreshToken = async () => {\n    const token = localStorage.getItem(\"@spotifood:RefreshToken\");\n\n    try {\n      const { accessToken, tokenType } = await SpotifyService.refreshesToken(\n        token as string\n      );\n\n      localStorage.setItem(\"@spotifood:AccessToken\", accessToken);\n      localStorage.setItem(\"@spotifood:TokenType\", tokenType);\n      setIsAuthenticated(true);\n    } catch (error) {\n      throw new Error(\n        \"Desculpe, um erro aconteceu. Por favor, refaça o login.\"\n      );\n    }\n  };\n\n  useEffect(() => {\n    const validateAccess = async () => {\n      const urlParams = new URLSearchParams(window.location.search);\n      const code = urlParams.get(\"code\");\n      const spotifyError = urlParams.get(\"error\");\n\n      try {\n        if (spotifyError) {\n          throw new Error(\n            \"Tentamos.... mas não conseguimos fazer o login com sua conta do Spotify.\"\n          );\n        }\n\n        if (code) {\n          await getAccessToken(code);\n          return;\n        }\n\n        if (hasToken()) {\n          await refreshToken();\n        }\n      } catch (error) {\n        throw new Error('Invalid year value')\n      }\n    };\n\n    validateAccess();\n  }, []);\n\n  const signOut = () => {\n    localStorage.removeItem(\"@spotifood:AccessToken\");\n    localStorage.removeItem(\"@spotifood:RefreshToken\");\n    localStorage.removeItem(\"@spotifood:TokenType\");\n    setIsAuthenticated(false);\n  };\n\n  return (\n    <AuthContext.Provider value={{ isAuthenticated, signOut }}>\n      {children}\n    </AuthContext.Provider>\n  );\n};\n\nfunction useAuth(): IAuthContext {\n  const context = useContext(AuthContext);\n\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProviver\");\n  }\n\n  return context;\n}\n\nexport { AuthProvider, useAuth };\n"]},"metadata":{},"sourceType":"module"}