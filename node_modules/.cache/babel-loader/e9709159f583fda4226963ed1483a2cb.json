{"ast":null,"code":"var _jsxFileName = \"/home/gimenezes/projects/ifood-frontend-test/src/Pages/Playlists/Filters/index.tsx\";\nimport React, { useState, useEffect, memo, useCallback } from \"react\";\nimport FilterService from \"../../../Services/filterService\";\nimport { useFeaturedPlaylist } from \"../../../Hooks/playlistsHook\";\nimport Filters from \"../../../Components/Filters\";\nimport { Form, EmptyState } from \"./styles\";\n\nconst PlaylistFilters = () => {\n  const [filtersField, setFiltersField] = useState([]);\n  const {\n    filter,\n    setFilter\n  } = useFeaturedPlaylist();\n  const getFilters = useCallback(async () => {\n    try {\n      const filtersData = await FilterService.get();\n      setFiltersField(filtersData);\n    } catch (error) {\n      alert(\"Ops! Não conseguimos buscar os filtros\");\n    }\n  }, []);\n\n  const handleChange = (id, value) => {\n    const newFilter = { ...filter,\n      [id]: value\n    };\n    setFilter(newFilter);\n  };\n\n  const getEmptyState = () => {\n    if (filtersField === null || filtersField === void 0 ? void 0 : filtersField.length) {\n      return null;\n    }\n\n    return /*#__PURE__*/React.createElement(EmptyState, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 12\n      }\n    }, \"Nenhum filtro encontrado.\");\n  };\n\n  const mapFiltersField = () => filtersField === null || filtersField === void 0 ? void 0 : filtersField.map(filterField => /*#__PURE__*/React.createElement(Filters, Object.assign({\n    \"data-testeid\": \"filter-item\",\n    key: filterField.id\n  }, filterField, {\n    onChange: value => handleChange(filterField.id, value),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  })));\n\n  useEffect(() => {\n    getFilters();\n  }, [getFilters]);\n  return /*#__PURE__*/React.createElement(Form, {\n    noValidate: true,\n    autoComplete: \"off\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 5\n    }\n  }, getEmptyState(), mapFiltersField());\n};\n\nexport default memo(PlaylistFilters);","map":{"version":3,"sources":["/home/gimenezes/projects/ifood-frontend-test/src/Pages/Playlists/Filters/index.tsx"],"names":["React","useState","useEffect","memo","useCallback","FilterService","useFeaturedPlaylist","Filters","Form","EmptyState","PlaylistFilters","filtersField","setFiltersField","filter","setFilter","getFilters","filtersData","get","error","alert","handleChange","id","value","newFilter","getEmptyState","length","mapFiltersField","map","filterField"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,EAAqCC,IAArC,EAA2CC,WAA3C,QAA8D,OAA9D;AAEA,OAAOC,aAAP,MAA0B,iCAA1B;AACA,SAASC,mBAAT,QAAoC,8BAApC;AAEA,OAAOC,OAAP,MAAsC,6BAAtC;AAEA,SAASC,IAAT,EAAeC,UAAf,QAAiC,UAAjC;;AAEA,MAAMC,eAAyB,GAAG,MAAM;AACtC,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,EAAD,CAAhD;AAEA,QAAM;AAAEY,IAAAA,MAAF;AAAUC,IAAAA;AAAV,MAAwBR,mBAAmB,EAAjD;AAEA,QAAMS,UAAU,GAAGX,WAAW,CAAC,YAAY;AACzC,QAAI;AACF,YAAMY,WAAW,GAAG,MAAMX,aAAa,CAACY,GAAd,EAA1B;AACAL,MAAAA,eAAe,CAACI,WAAD,CAAf;AACD,KAHD,CAGE,OAAOE,KAAP,EAAc;AACdC,MAAAA,KAAK,CAAC,wCAAD,CAAL;AACD;AACF,GAP6B,EAO3B,EAP2B,CAA9B;;AASA,QAAMC,YAAY,GAAG,CAACC,EAAD,EAAaC,KAAb,KAAwC;AAC3D,UAAMC,SAAS,GAAG,EAChB,GAAGV,MADa;AAEhB,OAACQ,EAAD,GAAMC;AAFU,KAAlB;AAKAR,IAAAA,SAAS,CAACS,SAAD,CAAT;AACD,GAPD;;AASA,QAAMC,aAAa,GAAG,MAAM;AAC1B,QAAIb,YAAJ,aAAIA,YAAJ,uBAAIA,YAAY,CAAEc,MAAlB,EAA0B;AACxB,aAAO,IAAP;AACD;;AAED,wBAAO,oBAAC,UAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mCAAP;AACD,GAND;;AAQA,QAAMC,eAAe,GAAG,MACtBf,YADsB,aACtBA,YADsB,uBACtBA,YAAY,CAAEgB,GAAd,CAAmBC,WAAD,iBAChB,oBAAC,OAAD;AACE,oBAAa,aADf;AAEE,IAAA,GAAG,EAAEA,WAAW,CAACP;AAFnB,KAGMO,WAHN;AAIE,IAAA,QAAQ,EAAGN,KAAD,IAAWF,YAAY,CAACQ,WAAW,CAACP,EAAb,EAAiBC,KAAjB,CAJnC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KADF,CADF;;AAUApB,EAAAA,SAAS,CAAC,MAAM;AACda,IAAAA,UAAU;AACX,GAFQ,EAEN,CAACA,UAAD,CAFM,CAAT;AAIA,sBACE,oBAAC,IAAD;AAAM,IAAA,UAAU,MAAhB;AAAiB,IAAA,YAAY,EAAC,KAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGS,aAAa,EADhB,EAGGE,eAAe,EAHlB,CADF;AAOD,CApDD;;AAsDA,eAAevB,IAAI,CAACO,eAAD,CAAnB","sourcesContent":["import React, { useState, useEffect, memo, useCallback } from \"react\";\n\nimport FilterService from \"../../../Services/filterService\";\nimport { useFeaturedPlaylist } from \"../../../Hooks/playlistsHook\";\n\nimport Filters, { IFilterProps } from \"../../../Components/Filters\";\n\nimport { Form, EmptyState } from \"./styles\";\n\nconst PlaylistFilters: React.FC = () => {\n  const [filtersField, setFiltersField] = useState([] as IFilterProps[]);\n\n  const { filter, setFilter } = useFeaturedPlaylist();\n\n  const getFilters = useCallback(async () => {\n    try {\n      const filtersData = await FilterService.get();\n      setFiltersField(filtersData);\n    } catch (error) {\n      alert(\"Ops! Não conseguimos buscar os filtros\");\n    }\n  }, []);\n\n  const handleChange = (id: string, value: string | number) => {\n    const newFilter = {\n      ...filter,\n      [id]: value,\n    };\n\n    setFilter(newFilter);\n  };\n\n  const getEmptyState = () => {\n    if (filtersField?.length) {\n      return null;\n    }\n\n    return <EmptyState>Nenhum filtro encontrado.</EmptyState>;\n  };\n\n  const mapFiltersField = () =>\n    filtersField?.map((filterField: IFilterProps) => (\n      <Filters\n        data-testeid=\"filter-item\"\n        key={filterField.id}\n        {...filterField}\n        onChange={(value) => handleChange(filterField.id, value)}\n      />\n    ));\n\n  useEffect(() => {\n    getFilters();\n  }, [getFilters]);\n\n  return (\n    <Form noValidate autoComplete=\"off\">\n      {getEmptyState()}\n\n      {mapFiltersField()}\n    </Form>\n  );\n};\n\nexport default memo(PlaylistFilters);\n"]},"metadata":{},"sourceType":"module"}