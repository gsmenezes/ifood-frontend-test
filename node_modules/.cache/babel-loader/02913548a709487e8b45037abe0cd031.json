{"ast":null,"code":"import axios from 'axios';\nimport { URLSearchParams } from 'url';\nimport configApi from './API/configApi';\nconst {\n  spotifyAccountUrl,\n  spotifyApi\n} = configApi;\n\nclass SpotifyService {\n  static createSimpleAuth() {\n    const {\n      clientId,\n      clientSecret\n    } = configApi;\n    const authToken = btoa(`${clientId}:${clientSecret}`);\n    return `Basic ${authToken}`;\n  }\n\n  static createTokenOptions() {\n    const options = {\n      headers: {\n        Authorization: SpotifyService.createSimpleAuth(),\n        'Content-Type': 'application/x-www-form-urlencoded'\n      }\n    };\n    return options;\n  }\n\n  static async getAccessToken(code) {\n    const {\n      origin,\n      pathname\n    } = window.location;\n    const params = {\n      grant_type: 'authorization_code',\n      code,\n      redirect_uri: `${origin}${pathname}`\n    };\n    const queryString = new URLSearchParams(params).toString();\n    const response = await axios.post(SpotifyService.urlApiToken, queryString, SpotifyService.createTokenOptions());\n    const {\n      access_token,\n      token_type,\n      refresh_token\n    } = response.data;\n    SpotifyService.token = {\n      refreshToken: refresh_token,\n      accessToken: access_token,\n      tokenType: token_type\n    };\n    return SpotifyService.token;\n  }\n\n  static async refreshesToken(token) {\n    const params = {\n      grant_type: 'refresh_token',\n      refresh_token: token\n    };\n    const queryString = new URLSearchParams(params).toString();\n    const response = await axios.post(SpotifyService.urlApiToken, queryString, SpotifyService.createTokenOptions());\n    const {\n      access_token,\n      token_type\n    } = response.data;\n    SpotifyService.token = {\n      refreshToken: token,\n      accessToken: access_token,\n      tokenType: token_type\n    };\n    return SpotifyService.token;\n  }\n\n  static async getPlaylists(filter) {\n    const {\n      tokenType,\n      accessToken\n    } = SpotifyService.token;\n    const searchParams = new URLSearchParams();\n    Object.keys(filter).forEach(key => {\n      const fakeFilter = filter;\n      const value = fakeFilter[key];\n\n      if (!value) {\n        return;\n      }\n\n      searchParams.append(key, fakeFilter[key]);\n    });\n    const url = `${spotifyApi}/browse/featured-playlists?${searchParams.toString()}`;\n    const options = {\n      headers: {\n        Authorization: `${tokenType} ${accessToken}`\n      }\n    };\n    const response = await axios.get(url, options);\n    return response.data.playlists;\n  }\n\n}\n\nSpotifyService.urlApiToken = `${spotifyAccountUrl}/api/token`;\nSpotifyService.token = {};\nexport default SpotifyService;","map":{"version":3,"sources":["/home/gimenezes/projects/ifood-frontend-test/src/Services/spotifyService.ts"],"names":["axios","URLSearchParams","configApi","spotifyAccountUrl","spotifyApi","SpotifyService","createSimpleAuth","clientId","clientSecret","authToken","btoa","createTokenOptions","options","headers","Authorization","getAccessToken","code","origin","pathname","window","location","params","grant_type","redirect_uri","queryString","toString","response","post","urlApiToken","access_token","token_type","refresh_token","data","token","refreshToken","accessToken","tokenType","refreshesToken","getPlaylists","filter","searchParams","Object","keys","forEach","key","fakeFilter","value","append","url","get","playlists"],"mappings":"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","sourcesContent":["import axios, { AxiosRequestConfig } from 'axios';\nimport { URLSearchParams } from 'url';\n\nimport configApi from './API/configApi';\n\nconst { spotifyAccountUrl, spotifyApi } = configApi;\n\ninterface IToken {\n    accessToken: string;\n    refreshToken: string;\n    tokenType: string;\n}\n\nexport interface IPlaylistFilter {\n    locale?: string;\n    country?: string;\n    timestamp?: string;\n    limit?: number;\n    offset?: number;\n}\n\nexport interface IPlaylistItem {\n    id: string;\n    description: string;\n    external_urls: { spotify: string };\n    images: { url: string }[];\n    name: string;\n    display_name?: string;\n}\n\nexport interface IPlaylistResponse {\n    items: IPlaylistItem[];\n    next: string | null;\n    previous: string | null;\n    total: number;\n}\n\nclass SpotifyService {\n    static urlApiToken = `${spotifyAccountUrl}/api/token`;\n\n    static token: IToken = {} as IToken;\n\n    static createSimpleAuth(): string {\n        const { clientId, clientSecret } = configApi;\n        const authToken = btoa(`${clientId}:${clientSecret}`);\n\n        return `Basic ${authToken}`;\n    }\n\n    static createTokenOptions(): AxiosRequestConfig {\n        const options = {\n            headers: {\n                Authorization: SpotifyService.createSimpleAuth(),\n                'Content-Type': 'application/x-www-form-urlencoded',\n            },\n        };\n\n        return options;\n    }\n\n    static async getAccessToken(code: string): Promise<IToken> {\n        const { origin, pathname } = window.location;\n\n        const params = {\n            grant_type: 'authorization_code',\n            code,\n            redirect_uri: `${origin}${pathname}`,\n        };\n\n        const queryString = new URLSearchParams(params).toString();\n\n        const response = await axios.post(SpotifyService.urlApiToken, queryString, SpotifyService.createTokenOptions(),);\n\n        const { access_token, token_type, refresh_token } = response.data;\n\n        SpotifyService.token = {\n            refreshToken: refresh_token,\n            accessToken: access_token,\n            tokenType: token_type,\n        };\n\n        return SpotifyService.token;\n    }\n\n    static async refreshesToken(token: string): Promise<IToken> {\n        const params = {\n            grant_type: 'refresh_token',\n            refresh_token: token,\n        };\n\n        const queryString = new URLSearchParams(params).toString();\n\n        const response = await axios.post(SpotifyService.urlApiToken, queryString, SpotifyService.createTokenOptions(),);\n\n        const { access_token, token_type } = response.data;\n\n        SpotifyService.token = {\n            refreshToken: token,\n            accessToken: access_token,\n            tokenType: token_type,\n        };\n\n        return SpotifyService.token;\n\n    }\n\n    static async getPlaylists(filter: IPlaylistFilter): Promise<IPlaylistResponse> {\n        const { tokenType, accessToken } = SpotifyService.token;\n\n        const searchParams = new URLSearchParams();\n\n        Object.keys(filter).forEach((key) => {\n            const fakeFilter = filter as Record<string, string>;\n            const value = fakeFilter[key];\n\n            if (!value) {\n                return;\n            }\n\n            searchParams.append(key, fakeFilter[key]);\n        });\n\n        const url = `${spotifyApi}/browse/featured-playlists?${searchParams.toString()}`;\n\n        const options = {\n            headers: {\n                Authorization: `${tokenType} ${accessToken}`,\n            },\n        };\n\n        const response = await axios.get(url, options);\n\n        return response.data.playlists;\n    }\n}\n\nexport default SpotifyService;"]},"metadata":{},"sourceType":"module"}