{"ast":null,"code":"var _jsxFileName = \"/home/gimenezes/projects/ifood-frontend-test/src/Hooks/playlistsHook.tsx\";\nimport React, { createContext, useState, useContext, useEffect, useCallback } from \"react\";\nimport SpotifyService from \"../Services/spotifyService\";\nimport { useAuth } from \"./auth\";\nconst FeaturedPlaylistContext = createContext({});\n\nconst FeaturedPlaylistProvider = ({\n  children\n}) => {\n  const {\n    signOut\n  } = useAuth();\n  const [filter, setFilter] = useState({});\n  const [search, setSearch] = useState(\"\");\n  const [playlists, setPlaylists] = useState([]);\n  const getFeaturedPlaylists = useCallback(async () => {\n    try {\n      const {\n        items\n      } = await SpotifyService.getPlaylists(filter);\n      setPlaylists(items);\n    } catch ({\n      response: {\n        status\n      }\n    }) {\n      setPlaylists([]);\n\n      switch (status) {\n        case 400:\n          alert(\"Desculpe! N達o achamos as playlists com o filtro informado.\");\n          break;\n\n        case 401:\n          alert(\"Tentamos.... mas n達o conseguimos fazer o login com sua conta do Spotify.\");\n          signOut();\n          break;\n\n        default:\n          alert(\"Desculpe! Um erro aconteceu. Por favor, tente refazer a busca.\");\n          break;\n      }\n    } finally {}\n  }, [filter, signOut]);\n  const filteredPlaylists = playlists.filter(({\n    name\n  }) => name.toLowerCase().includes(search.toLowerCase().trim()));\n  useEffect(() => {\n    getFeaturedPlaylists();\n    const playlistsTimer = setInterval(() => {\n      getFeaturedPlaylists();\n    }, 30000);\n    return () => clearInterval(playlistsTimer);\n  }, [getFeaturedPlaylists]);\n  return /*#__PURE__*/React.createElement(FeaturedPlaylistContext.Provider, {\n    value: {\n      filter,\n      setFilter,\n      playlists: filteredPlaylists,\n      setSearch\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 5\n    }\n  }, children);\n};\n\nfunction useFeaturedPlaylist() {\n  const context = useContext(FeaturedPlaylistContext);\n\n  if (!context) {\n    throw new Error(\"useFeaturedPlaylist must be used within an FeaturedPlaylistProviver\");\n  }\n\n  return context;\n}\n\nexport { FeaturedPlaylistProvider, useFeaturedPlaylist };","map":{"version":3,"sources":["/home/gimenezes/projects/ifood-frontend-test/src/Hooks/playlistsHook.tsx"],"names":["React","createContext","useState","useContext","useEffect","useCallback","SpotifyService","useAuth","FeaturedPlaylistContext","FeaturedPlaylistProvider","children","signOut","filter","setFilter","search","setSearch","playlists","setPlaylists","getFeaturedPlaylists","items","getPlaylists","response","status","alert","filteredPlaylists","name","toLowerCase","includes","trim","playlistsTimer","setInterval","clearInterval","useFeaturedPlaylist","context","Error"],"mappings":";AAAA,OAAOA,KAAP,IACEC,aADF,EAEEC,QAFF,EAGEC,UAHF,EAIEC,SAJF,EAKEC,WALF,QAMO,OANP;AAQA,OAAOC,cAAP,MAGO,4BAHP;AAKA,SAASC,OAAT,QAAwB,QAAxB;AASA,MAAMC,uBAAuB,GAAGP,aAAa,CAC3C,EAD2C,CAA7C;;AAIA,MAAMQ,wBAAkC,GAAG,CAAC;AAAEC,EAAAA;AAAF,CAAD,KAAkB;AAC3D,QAAM;AAAEC,IAAAA;AAAF,MAAcJ,OAAO,EAA3B;AAEA,QAAM,CAACK,MAAD,EAASC,SAAT,IAAsBX,QAAQ,CAAC,EAAD,CAApC;AAEA,QAAM,CAACY,MAAD,EAASC,SAAT,IAAsBb,QAAQ,CAAC,EAAD,CAApC;AAEA,QAAM,CAACc,SAAD,EAAYC,YAAZ,IAA4Bf,QAAQ,CAAC,EAAD,CAA1C;AAEA,QAAMgB,oBAAoB,GAAGb,WAAW,CAAC,YAAY;AACnD,QAAI;AACF,YAAM;AAAEc,QAAAA;AAAF,UAAY,MAAMb,cAAc,CAACc,YAAf,CAA4BR,MAA5B,CAAxB;AACAK,MAAAA,YAAY,CAACE,KAAD,CAAZ;AACD,KAHD,CAGE,OAAO;AAAEE,MAAAA,QAAQ,EAAE;AAAEC,QAAAA;AAAF;AAAZ,KAAP,EAAiC;AACjCL,MAAAA,YAAY,CAAC,EAAD,CAAZ;;AAEA,cAAQK,MAAR;AACE,aAAK,GAAL;AACEC,UAAAA,KAAK,CACH,4DADG,CAAL;AAGA;;AACF,aAAK,GAAL;AACEA,UAAAA,KAAK,CAAC,0EAAD,CAAL;AACAZ,UAAAA,OAAO;AACP;;AACF;AACEY,UAAAA,KAAK,CAAC,gEAAD,CAAL;AACA;AAZJ;AAcD,KApBD,SAoBU,CACT;AACF,GAvBuC,EAuBrC,CAACX,MAAD,EAASD,OAAT,CAvBqC,CAAxC;AAyBA,QAAMa,iBAAiB,GAAGR,SAAS,CAACJ,MAAV,CAAiB,CAAC;AAAEa,IAAAA;AAAF,GAAD,KACzCA,IAAI,CAACC,WAAL,GAAmBC,QAAnB,CAA4Bb,MAAM,CAACY,WAAP,GAAqBE,IAArB,EAA5B,CADwB,CAA1B;AAIAxB,EAAAA,SAAS,CAAC,MAAM;AACdc,IAAAA,oBAAoB;AAEpB,UAAMW,cAAc,GAAGC,WAAW,CAAC,MAAM;AACvCZ,MAAAA,oBAAoB;AACrB,KAFiC,EAE/B,KAF+B,CAAlC;AAIA,WAAO,MAAMa,aAAa,CAACF,cAAD,CAA1B;AACD,GARQ,EAQN,CAACX,oBAAD,CARM,CAAT;AAUA,sBACE,oBAAC,uBAAD,CAAyB,QAAzB;AACE,IAAA,KAAK,EAAE;AACLN,MAAAA,MADK;AAELC,MAAAA,SAFK;AAGLG,MAAAA,SAAS,EAAEQ,iBAHN;AAILT,MAAAA;AAJK,KADT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAQGL,QARH,CADF;AAYD,CA5DD;;AA8DA,SAASsB,mBAAT,GAAyD;AACvD,QAAMC,OAAO,GAAG9B,UAAU,CAACK,uBAAD,CAA1B;;AAEA,MAAI,CAACyB,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CACJ,qEADI,CAAN;AAGD;;AAED,SAAOD,OAAP;AACD;;AAED,SAASxB,wBAAT,EAAmCuB,mBAAnC","sourcesContent":["import React, {\n  createContext,\n  useState,\n  useContext,\n  useEffect,\n  useCallback,\n} from \"react\";\n\nimport SpotifyService, {\n  IPlaylistFilter,\n  IPlaylistItem,\n} from \"../Services/spotifyService\";\n\nimport { useAuth } from \"./auth\";\n\ninterface IFeaturedPlaylistContext {\n  playlists: IPlaylistItem[];\n  filter: IPlaylistFilter;\n  setSearch: (filter: string) => void;\n  setFilter: (filter: IPlaylistFilter) => void;\n}\n\nconst FeaturedPlaylistContext = createContext<IFeaturedPlaylistContext>(\n  {} as IFeaturedPlaylistContext\n);\n\nconst FeaturedPlaylistProvider: React.FC = ({ children }) => {\n  const { signOut } = useAuth();\n\n  const [filter, setFilter] = useState({} as IPlaylistFilter);\n\n  const [search, setSearch] = useState(\"\");\n\n  const [playlists, setPlaylists] = useState([] as IPlaylistItem[]);\n\n  const getFeaturedPlaylists = useCallback(async () => {\n    try {\n      const { items } = await SpotifyService.getPlaylists(filter);\n      setPlaylists(items);\n    } catch ({ response: { status } }) {\n      setPlaylists([]);\n\n      switch (status) {\n        case 400:\n          alert(\n            \"Desculpe! N達o achamos as playlists com o filtro informado.\"\n          );\n          break;\n        case 401:\n          alert(\"Tentamos.... mas n達o conseguimos fazer o login com sua conta do Spotify.\");\n          signOut();\n          break;\n        default:\n          alert(\"Desculpe! Um erro aconteceu. Por favor, tente refazer a busca.\");\n          break;\n      }\n    } finally {\n    }\n  }, [filter, signOut]);\n\n  const filteredPlaylists = playlists.filter(({ name }: IPlaylistItem) =>\n    name.toLowerCase().includes(search.toLowerCase().trim())\n  );\n\n  useEffect(() => {\n    getFeaturedPlaylists();\n\n    const playlistsTimer = setInterval(() => {\n      getFeaturedPlaylists();\n    }, 30000);\n\n    return () => clearInterval(playlistsTimer);\n  }, [getFeaturedPlaylists]);\n\n  return (\n    <FeaturedPlaylistContext.Provider\n      value={{\n        filter,\n        setFilter,\n        playlists: filteredPlaylists,\n        setSearch,\n      }}\n    >\n      {children}\n    </FeaturedPlaylistContext.Provider>\n  );\n};\n\nfunction useFeaturedPlaylist(): IFeaturedPlaylistContext {\n  const context = useContext(FeaturedPlaylistContext);\n\n  if (!context) {\n    throw new Error(\n      \"useFeaturedPlaylist must be used within an FeaturedPlaylistProviver\"\n    );\n  }\n\n  return context;\n}\n\nexport { FeaturedPlaylistProvider, useFeaturedPlaylist };\n"]},"metadata":{},"sourceType":"module"}